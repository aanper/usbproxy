
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module	reset_delay(iRSTN, iCLK, oRST);
input		    iRSTN;
input		    iCLK;
output reg	oRST;

reg  [20:0] cont;

always @(posedge iCLK or negedge iRSTN)
  if (!iRSTN) 
  begin
    cont     <= 21'b0;
    oRST     <= 1'b1;
  end
  else if (!cont[20]) 
  begin
    cont <= cont + 21'b1;
    oRST <= 1'b1;
  end
  else
    oRST <= 1'b0;
  
endmodule

module DE10_LITE_Default(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
   //////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
	
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire DLY_RST;
wire VGA_CTRL_CLK;


wire   [9:0]   mVGA_R;
wire   [9:0]	mVGA_G;
wire   [9:0]	mVGA_B;
wire   [19:0]	mVGA_ADDR;
wire 				VGA_CLK;

reg  [31:0]	Cont;
wire [23:0]	mSEG7_DIG;
wire	        spi_clk, spi_clk_out;
wire 			resrt_n;
wire	[15:0]  data_x;

//=======================================================
//  Structural coding
//=======================================================
//
assign DRAM_DQ 	   =  16'hzzzz;
assign ARDUINO_IO 	=  16'hzzzz;
assign GPIO		  		=	36'hzzzzzzzz;

assign VGA_CLK = VGA_CTRL_CLK;
assign resrt_n = KEY[0];
assign user = KEY[1];

reset_delay	u_reset_delay	(	
            .iRSTN(resrt_n),
            .iCLK(MAX10_CLK1_50),
            .oRST(DLY_RST));

always@(posedge MAX10_CLK2_50) begin
	Cont <= Cont + 2;
end

assign mSEG7_DIG = resrt_n
	? {{5{4'b1000}}, Cont[27:24]}
	: {6{4'b1000}}
;

SEG7_LUT_6 			u0	(	.oSEG0(HEX0),
							   .oSEG1(HEX1),
							   .oSEG2(HEX2),
							   .oSEG3(HEX3),
								.oSEG4(HEX4),
								.oSEG5(HEX5),
							   .iDIG(mSEG7_DIG) );



// USB playground

assign usb_dm_in = GPIO[0];
assign usb_dp_in = GPIO[1];


assign usb_data = ~usb_dp_in & usb_dm_in; // full-speed
assign se0 = ~usb_dp_in & ~usb_dm_in;

reg usb_clk_en;
reg [2:0] usb_clk_cnt;
assign usb_clk = usb_clk_cnt[1] & usb_clk_en;

reg [2:0] usb_state;
reg [7:0] preamble;

assign GPIO[4:2] = usb_state[2:0];

always@ (posedge MAX10_CLK2_50) begin
	if(DLY_RST == 1) begin
		usb_clk_en <= 0;
		usb_clk_cnt <= 0;
		
	end else begin
		if(usb_clk_en) begin
			usb_clk_cnt <= usb_clk_cnt + 1;
		end else if(usb_data == 1) begin // TODO
			usb_clk_en <= 1;
		end
	end
end



always@ (posedge usb_clk) begin
	if(DLY_RST == 1) begin
		usb_state <= 3'h0;
	
	end else if (se0 == 1) begin
		usb_state <= 0;
	
	end else begin
		if(usb_state == 0) begin
			// fill preamble register
			preamble <= {preamble[6:0], usb_data};
			if(preamble == 8'b01010101) begin
				usb_state <= 1;
			end
		end
	end
end

assign GPIO[5] = usb_data;
assign GPIO[6] = se0;
assign GPIO[7] = usb_clk;
assign GPIO[8] = DLY_RST;
assign GPIO[9] = usb_clk_en;
assign GPIO[10] = usb_state[0];

assign LEDR = resrt_n
	? {7'b0, usb_dm_in, usb_dp_in, user}
	: 10'h3ff
;

endmodule
